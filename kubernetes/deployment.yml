apiVersion: apps/v1
kind: Deployment
metadata:
  name: codehawk-api
  namespace: codehawk
  labels:
    app: codehawk
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: codehawk
      component: api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: codehawk
        component: api
    spec:
      containers:
      - name: api
        image: codehawk/api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        envFrom:
        - configMapRef:
            name: codehawk-config
        - secretRef:
            name: codehawk-secrets
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      - name: linters
        image: codehawk/linters:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: "500m"
            memory: "1Gi"
          requests:
            cpu: "200m"
            memory: "512Mi"
        volumeMounts:
        - name: linters-data
          mountPath: /usr/local/lib
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: linters-data
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: codehawk
  labels:
    app: codehawk
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: codehawk
      component: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: codehawk
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: codehawk-config
              key: DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: codehawk-config
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codehawk-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          limits:
            cpu: "1"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: codehawk
  labels:
    app: codehawk
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: codehawk
      component: cache
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: codehawk
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command: ["redis-server"]
        args: ["--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codehawk-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          limits:
            cpu: "500m"
            memory: "1Gi"
          requests:
            cpu: "100m"
            memory: "256Mi"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: codehawk
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: codehawk
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi