version: '3.8'

services:
  # CodeHawk API Server
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - API_KEY=${API_KEY:-demo_api_key_123}
      - LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=codehawk
      - DB_SSL_MODE=disable
      - AI_ENABLED=${AI_ENABLED:-false}
      - AI_ENDPOINT=${AI_ENDPOINT:-https://api.openai.com/v1/chat/completions}
      - AI_API_KEY=${AI_API_KEY:-}
      - AI_MODEL=${AI_MODEL:-gpt-4}
      - AI_PROVIDER=${AI_PROVIDER:-openai}
      - CACHING_ENABLED=true
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - linters
    restart: unless-stopped

  # Database for storing analysis results and user data
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=codehawk
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/db/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Development container for linters (used by the API server)
  linters:
    build:
      context: ./backend
      dockerfile: Dockerfile.linters
    volumes:
      - linters-data:/usr/local/lib
    restart: unless-stopped

  # Adminer for database management (development only)
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=flat

volumes:
  postgres-data:
  redis-data:
  linters-data: